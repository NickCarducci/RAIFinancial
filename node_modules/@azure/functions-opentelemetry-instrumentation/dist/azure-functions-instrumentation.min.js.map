{"version":3,"file":"azure-functions-instrumentation.min.js","mappings":"wGAGa,EAAAA,QAAU,O,uGCCvB,eACA,SACA,SAKA,SAEA,MAAaC,UAAsC,EAAAC,oBAG/C,WAAAC,CAAYC,EAAgC,CAAC,GACzCC,MAAM,iDAAkD,EAAAL,QAASI,EACrE,CAEU,IAAAE,GACN,OAAO,IAAI,EAAAC,oCACP,mBACA,CAAC,WACAC,GAAiCC,KAAKC,OAAOF,KAC7CA,GAAiCC,KAAKE,SAASH,IAExD,CAEQ,MAAAE,CAAOE,GACX,MAAMC,EAAmC,GAsCzC,OAlCAD,EAAOE,IAAIC,MAAM,CACbC,aAAc,CACVC,4BAA4B,KAKpCJ,EAAYK,KACRN,EAAOE,IAAIK,KAAKC,KAAKC,IACjBZ,KAAKa,OAAOC,KAAK,CACbC,KAAMH,EAAQI,QACdC,eAAgBC,EAAqBN,EAAQO,OAC7CC,aAAcR,EAAQO,OACxB,KAKVf,EAAYK,KACRN,EAAOE,IAAIK,KAAKW,eAAeT,IAC3B,MAAMU,EAAeV,EAAQW,kBAAkBD,aAC3CA,IACAV,EAAQY,gBAAkB,UAAYC,KAClC,EAAAC,YAAYC,QAAQ,UAAYC,SAAU,CACtCC,YAAaP,EAAaQ,YAC1BC,WAAYT,EAAaU,aAE7BpB,EAAQY,iB,KAMxBxB,KAAKiC,kBAAoB9B,EAAO+B,WAAWC,QAAQ/B,GAC5CD,CACX,CAEQ,QAAAD,CAASC,G,MACS,QAAtB,EAAAH,KAAKiC,yBAAiB,SAAEG,UAExBjC,EAAOE,IAAIC,MAAM,CACbC,aAAc,CACVC,4BAA4B,IAGxC,EAGJ,SAASU,EAAqBC,GAC1B,OAAQA,GACJ,IAAK,cACD,OAAO,EAAAkB,eAAeC,KAC1B,IAAK,QACD,OAAO,EAAAD,eAAeE,MAC1B,IAAK,QACD,OAAO,EAAAF,eAAeG,MAC1B,IAAK,QACD,OAAO,EAAAH,eAAeI,MAC1B,IAAK,UACD,OAAO,EAAAJ,eAAeK,KAC1B,IAAK,WACD,OAAO,EAAAL,eAAeM,MAC1B,QACI,OAAO,EAAAN,eAAeO,YAElC,CAtFA,iC,UCbAC,EAAOC,QAAUC,QAAQ,qB,UCAzBF,EAAOC,QAAUC,QAAQ,0B,UCAzBF,EAAOC,QAAUC,QAAQ,iC,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,+GCnBA,YAAS,+FAAAtD,6BAA6B,G","sources":["webpack://@azure/functions-opentelemetry-instrumentation/./src/constants.ts","webpack://@azure/functions-opentelemetry-instrumentation/./src/instrumentation.ts","webpack://@azure/functions-opentelemetry-instrumentation/external commonjs2 \"@opentelemetry/api\"","webpack://@azure/functions-opentelemetry-instrumentation/external commonjs2 \"@opentelemetry/api-logs\"","webpack://@azure/functions-opentelemetry-instrumentation/external commonjs2 \"@opentelemetry/instrumentation\"","webpack://@azure/functions-opentelemetry-instrumentation/webpack/bootstrap","webpack://@azure/functions-opentelemetry-instrumentation/./src/index.ts"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport const version = '0.1.0';\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport type * as AzFunc from '@azure/functions';\r\nimport { context as otelContext, propagation } from '@opentelemetry/api';\r\nimport { SeverityNumber } from '@opentelemetry/api-logs';\r\nimport {\r\n    InstrumentationBase,\r\n    InstrumentationConfig,\r\n    InstrumentationNodeModuleDefinition,\r\n} from '@opentelemetry/instrumentation';\r\nimport { version } from './constants';\r\n\r\nexport class AzureFunctionsInstrumentation extends InstrumentationBase {\r\n    private _azFuncDisposable: AzFunc.Disposable | undefined;\r\n\r\n    constructor(config: InstrumentationConfig = {}) {\r\n        super('@azure/functions-opentelemetry-instrumentation', version, config);\r\n    }\r\n\r\n    protected init() {\r\n        return new InstrumentationNodeModuleDefinition(\r\n            '@azure/functions',\r\n            ['^4.5.0'],\r\n            (moduleExports: typeof AzFunc) => this._patch(moduleExports),\r\n            (moduleExports: typeof AzFunc) => this._unPatch(moduleExports)\r\n        );\r\n    }\r\n\r\n    private _patch(azFunc: typeof AzFunc): typeof AzFunc {\r\n        const disposables: AzFunc.Disposable[] = [];\r\n\r\n        // Tell the Azure Functions Host that we will send logs directly from Node.js\r\n        // (so that the host doesn't duplicate)\r\n        azFunc.app.setup({\r\n            capabilities: {\r\n                WorkerOpenTelemetryEnabled: true,\r\n            },\r\n        });\r\n\r\n        // Send logs directly from Node.js\r\n        disposables.push(\r\n            azFunc.app.hook.log((context) => {\r\n                this.logger.emit({\r\n                    body: context.message,\r\n                    severityNumber: toOtelSeverityNumber(context.level),\r\n                    severityText: context.level,\r\n                });\r\n            })\r\n        );\r\n\r\n        // Ensure Azure Functions Host trace context is propagated onto the user's Node.js function handler\r\n        disposables.push(\r\n            azFunc.app.hook.preInvocation((context) => {\r\n                const traceContext = context.invocationContext.traceContext;\r\n                if (traceContext) {\r\n                    context.functionHandler = otelContext.bind(\r\n                        propagation.extract(otelContext.active(), {\r\n                            traceparent: traceContext.traceParent,\r\n                            tracestate: traceContext.traceState,\r\n                        }),\r\n                        context.functionHandler\r\n                    );\r\n                }\r\n            })\r\n        );\r\n\r\n        this._azFuncDisposable = azFunc.Disposable.from(...disposables);\r\n        return azFunc;\r\n    }\r\n\r\n    private _unPatch(azFunc: typeof AzFunc): void {\r\n        this._azFuncDisposable?.dispose();\r\n\r\n        azFunc.app.setup({\r\n            capabilities: {\r\n                WorkerOpenTelemetryEnabled: false,\r\n            },\r\n        });\r\n    }\r\n}\r\n\r\nfunction toOtelSeverityNumber(level: AzFunc.LogLevel): SeverityNumber {\r\n    switch (level) {\r\n        case 'information':\r\n            return SeverityNumber.INFO;\r\n        case 'debug':\r\n            return SeverityNumber.DEBUG;\r\n        case 'error':\r\n            return SeverityNumber.ERROR;\r\n        case 'trace':\r\n            return SeverityNumber.TRACE;\r\n        case 'warning':\r\n            return SeverityNumber.WARN;\r\n        case 'critical':\r\n            return SeverityNumber.FATAL;\r\n        default:\r\n            return SeverityNumber.UNSPECIFIED;\r\n    }\r\n}\r\n","module.exports = require(\"@opentelemetry/api\");","module.exports = require(\"@opentelemetry/api-logs\");","module.exports = require(\"@opentelemetry/instrumentation\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport { AzureFunctionsInstrumentation } from './instrumentation';\r\n"],"names":["version","AzureFunctionsInstrumentation","InstrumentationBase","constructor","config","super","init","InstrumentationNodeModuleDefinition","moduleExports","this","_patch","_unPatch","azFunc","disposables","app","setup","capabilities","WorkerOpenTelemetryEnabled","push","hook","log","context","logger","emit","body","message","severityNumber","toOtelSeverityNumber","level","severityText","preInvocation","traceContext","invocationContext","functionHandler","bind","propagation","extract","active","traceparent","traceParent","tracestate","traceState","_azFuncDisposable","Disposable","from","dispose","SeverityNumber","INFO","DEBUG","ERROR","TRACE","WARN","FATAL","UNSPECIFIED","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}